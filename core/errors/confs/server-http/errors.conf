{% if ERRORS != "" %}
	{% for element in ERRORS.split(" ") %}
		{% set code = element.split("=")[0] %}
		{% set page = element.split("=")[1] %}
error_page {{ code }} {{ page }};

location = {{ page }} {
    root {% if ROOT_FOLDER == "" %}/opt/bunkerweb/www/{% if MULTISITE == "yes" %}{{ SERVER_NAME.split(" ")[0] }}{% endif %}{% else %}{{ ROOT_FOLDER }}{% endif %};
    modsecurity off;
    internal;
}
	{% endfor %}
{% endif %}

{% if INTERCEPTED_ERROR_CODES != "" %}
	{% for intercepted_error_code in INTERCEPTED_ERROR_CODES.split(" ") %}
		{% if not intercepted_error_code + "=" in ERRORS +%}
			{% if intercepted_error_code == "405" +%}
	error_page 405 =200 @405;
			{% else +%}
	error_page {{ intercepted_error_code }} @{{ intercepted_error_code }};
			{% endif +%}
	location @{{ intercepted_error_code }} {
		auth_basic off;
		internal;
		modsecurity off;
		default_type 'text/html';
		content_by_lua_block {
			local logger = require "logger"
			local errors = require "errors.errors"
			local html, err
			if ngx.status == 200 then
				html, err = errors.error_html(tostring(405))
			else
				html, err = errors.error_html(tostring(ngx.status))
			end
			if not html then
				logger.log(ngx.ERR, "ERRORS", "Error while computing HTML error template for {{ intercepted_error_code }} : " .. err)
			else
				ngx.say(html)
			end
		}
	}

		{% endif %}
	{% endfor %}
{% endif %}
